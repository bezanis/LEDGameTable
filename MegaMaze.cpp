#include <MegaMaze.h>

MegaMaze::MegaMaze(NESController *controller, Adafruit_WS2801 *strip,LCD *lcdIn):Game(controller, strip, lcdIn){
	lcd->setLCD(1);
	newGame();
}

MegaMaze::~MegaMaze(){
}

void MegaMaze::newGame(){
	xpos=0;
	ypos=0;
	level=0;
	updateLevelDisplay();
	updateDisplay();
}

void MegaMaze::run(){
	if(controller->buttonPressed(controller->BUTTON_SELECT) && !controller->buttonHandled(controller->BUTTON_SELECT)){
		controller->handleButton(controller->BUTTON_SELECT);
		newGame();
	}
	if(controller->buttonPressed(controller->BUTTON_LEFT) && !controller->buttonHandled(controller->BUTTON_LEFT)){
		//controller->handleButton(controller->BUTTON_LEFT);
		moveCheck(0,1);
		delay(45);
	}
	if(controller->buttonPressed(controller->BUTTON_RIGHT) && !controller->buttonHandled(controller->BUTTON_RIGHT)){
		//controller->handleButton(controller->BUTTON_RIGHT);
		moveCheck(0,-1);
		delay(45);
	}
	if(controller->buttonPressed(controller->BUTTON_DOWN) && !controller->buttonHandled(controller->BUTTON_DOWN)){
		//controller->handleButton(controller->BUTTON_DOWN);
		moveCheck(1,0);
		delay(45);
	}
	if(controller->buttonPressed(controller->BUTTON_UP) && !controller->buttonHandled(controller->BUTTON_UP)){
		//controller->handleButton(controller->BUTTON_UP);
		moveCheck(-1,0);
		delay(45);
	}
	updateDisplay();
}

void MegaMaze::updateDisplay(){
	for (int i = 0; i < boardHeight; i++) {
		for (int j = 0; j < boardWidth; j++) {
			strip->setPixelColor(j,i,0);
		}
	}
	strip->setPixelColor(centerX,centerY,0x0000FF);
	for(int i = 0; i < getLevelSize();i++){
		int colorPosX = getX(i)+centerX+xpos;
		int colorPosY = getY(i)+centerY+ypos;
		if(colorPosX>=0 && colorPosX<boardWidth && colorPosY>=0 && colorPosY<boardHeight){
			strip->setPixelColor(colorPosX,colorPosY,((i==0)?0x00FF00:levelColors[level]));
		}
	}
	strip->show();
}

void MegaMaze::updateLevelDisplay(){
	lcd->setLCD(1);
	lcd->write(22);
	lcd->write(12); // Clear
	lcd->print("Level ");
	lcd->print((level+1));
	//lcd->print(levelSizes[level-1]);
}

void MegaMaze::resume(){
	updateLevelDisplay();
	updateDisplay();
}

bool MegaMaze::moveCheck(int xmove, int ymove){
	bool collision=false;
	for(int i = 0; i < getLevelSize();i++){
		if(getX(i)==-(xpos+xmove) && getY(i)==-(ypos+ymove)){
			if(i==0){
				winLevel();
				return true;
			}else{
				//lcd->write(210); // 1/16 note
				//lcd->write(216); // 4th scale
				//lcd->write(220); // A note
				collision = true;
			}
		}
	}
	if(!collision){
		xpos+=xmove;
		ypos+=ymove;
	}
	return true;
}

void MegaMaze::winLevel(){
	xpos=0;
	ypos=0;
	level++;
	if(level<levelCount-1){
		updateLevelDisplay();
	}else{
		lcd->write(22);
		lcd->write(12); // Clear
		lcd->print("You Win!        ");
		lcd->print("Get John a Beer ");
	}
	lcd->write(210); // 1/16 note
	lcd->write(216); // 4th scale
	lcd->write(223); // C note
	lcd->write(223); // C note
	lcd->write(212);
	lcd->write(218); // 6th scale
	lcd->write(223); // C note
}

int MegaMaze::getX(int pos){
	int curpos=0;
	for(int i=0;i<level;i++){
		curpos+=levelSizes[i];
	}
	return levels[(curpos+pos)*2];
}

int MegaMaze::getY(int pos){
	int curpos=0;
	for(int i=0;i<level;i++){
		curpos+=levelSizes[i];
	}
	return levels[(curpos+pos)*2+1];
}

int MegaMaze::getLevelSize(){
	return levelSizes[level];
}

const int MegaMaze::centerX = 5;
const int MegaMaze::centerY = 9;
const int MegaMaze::levelCount = 4;
const int MegaMaze::levels[] = {
	3,-3, 4,1, 3,1, 2,1, 1,1, 0,1, -1,1, 4,0, -1,0, 4,-1,
		2,-1, 1,-1, 0,-1, -1,-1, 4,-2, 2,-2, 4,-3, 2,-3, 4,-4, 3,-4,
		2,-4,
	-4,9, 4,-9, 3,-9, 2,-9, 1,-9, 0,-9, -1,-9, -2,-9, -3,-9, -4,-9,
		-5,-9, 4,-8, -5,-8, 4,-7, 2,-7, 0,-7, -1,-7, -2,-7, -3,-7, -5,-7,
		4,-6, 2,-6, 0,-6, -3,-6, -5,-6, 4,-5, 2,-5, 0,-5, -2,-5, -3,-5,
		-4,-5, -5,-5, 4,-4, 2,-4, -5,-4, 4,-3, 2,-3, 1,-3, 0,-3, -1,-3,
		-2,-3, -3,-3, -5,-3, 4,-2, 2,-2, -1,-2, -5,-2, 4,-1, 2,-1, 1,-1,
		-1,-1, -3,-1, -4,-1, -5,-1, 4,0, -1,0, -5,0, 4,1, 2,1, 1,1,
		0,1, -1,1, -2,1, -3,1, -5,1, 4,2, 2,2, -2,2, -5,2, 4,3,
		2,3, 0,3, -2,3, -4,3, -5,3, 4,4, 2,4, 0,4, -2,4, -5,4,
		4,5, 2,5, 0,5, -2,5, -3,5, -5,5, 4,6, 2,6, 0,6, -1,6,
		-2,6, -5,6, 4,7, 2,7, 0,7, -4,7, -5,7, 4,8, 2,8, 0,8,
		-2,8, -3,8, -4,8, -5,8, 4,9, 0,9, -5,9, 4,10, 3,10, 2,10,
		1,10, 0,10, -1,10, -2,10, -3,10, -4,10, -5,10,
	2,0, -15,-29, -16,-29, -17,-29, -18,-29, -19,-29, -20,-29, -21,-29, -22,-29, -23,-29,
		-24,-29, -25,-29, -15,-28, -25,-28, -15,-27, -17,-27, -19,-27, -20,-27, -21,-27, -22,-27,
		-23,-27, -24,-27, -25,-27, -9,-26, -10,-26, -11,-26, -12,-26, -13,-26, -14,-26, -15,-26,
		-17,-26, -19,-26, -25,-26, -9,-25, -15,-25, -17,-25, -21,-25, -22,-25, -23,-25, -25,-25,
		-9,-24, -11,-24, -12,-24, -13,-24, -15,-24, -17,-24, -18,-24, -19,-24, -20,-24, -21,-24,
		-25,-24, -9,-23, -11,-23, -13,-23, -15,-23, -19,-23, -23,-23, -24,-23, -25,-23, -26,-23,
		-27,-23, -28,-23, -29,-23, -30,-23, -31,-23, -32,-23, -9,-22, -11,-22, -13,-22, -15,-22,
		-16,-22, -17,-22, -19,-22, -21,-22, -22,-22, -23,-22, -32,-22, -9,-21, -11,-21, -13,-21,
		-17,-21, -19,-21, -25,-21, -26,-21, -27,-21, -28,-21, -29,-21, -30,-21, -32,-21, -33,-21,
		-34,-21, -35,-21, -9,-20, -11,-20, -13,-20, -15,-20, -19,-20, -20,-20, -21,-20, -22,-20,
		-23,-20, -25,-20, -35,-20, -9,-19, -11,-19, -13,-19, -15,-19, -16,-19, -17,-19, -18,-19,
		-19,-19, -23,-19, -25,-19, -26,-19, -27,-19, -28,-19, -29,-19, -30,-19, -31,-19, -32,-19,
		-33,-19, -35,-19, -9,-18, -11,-18, -13,-18, -21,-18, -23,-18, -33,-18, -35,-18, -8,-17,
		-9,-17, -11,-17, -13,-17, -14,-17, -15,-17, -16,-17, -17,-17, -18,-17, -19,-17, -20,-17,
		-21,-17, -23,-17, -24,-17, -25,-17, -26,-17, -27,-17, -28,-17, -29,-17, -30,-17, -31,-17,
		-32,-17, -33,-17, -35,-17, -8,-16, -11,-16, -15,-16, -23,-16, -31,-16, -35,-16, -8,-15,
		-10,-15, -11,-15, -12,-15, -13,-15, -15,-15, -17,-15, -18,-15, -19,-15, -20,-15, -21,-15,
		-22,-15, -23,-15, -25,-15, -26,-15, -27,-15, -28,-15, -29,-15, -30,-15, -31,-15, -33,-15,
		-34,-15, -35,-15, -36,-15, -37,-15, -8,-14, -15,-14, -23,-14, -25,-14, -37,-14, -8,-13,
		-9,-13, -10,-13, -11,-13, -13,-13, -14,-13, -15,-13, -16,-13, -17,-13, -18,-13, -19,-13,
		-20,-13, -21,-13, -23,-13, -25,-13, -27,-13, -28,-13, -29,-13, -30,-13, -31,-13, -32,-13,
		-33,-13, -34,-13, -35,-13, -37,-13, -9,-12, -11,-12, -13,-12, -23,-12, -25,-12, -35,-12,
		-37,-12, -9,-11, -11,-11, -13,-11, -15,-11, -16,-11, -17,-11, -18,-11, -19,-11, -20,-11,
		-21,-11, -23,-11, -25,-11, -26,-11, -27,-11, -29,-11, -31,-11, -32,-11, -33,-11, -34,-11,
		-35,-11, -36,-11, -37,-11, -38,-11, -39,-11, -40,-11, -41,-11, -42,-11, -43,-11, -9,-10,
		-11,-10, -13,-10, -21,-10, -23,-10, -25,-10, -29,-10, -31,-10, -43,-10, -9,-9, -11,-9,
		-13,-9, -14,-9, -15,-9, -16,-9, -17,-9, -18,-9, -19,-9, -21,-9, -23,-9, -25,-9,
		-27,-9, -28,-9, -29,-9, -31,-9, -33,-9, -34,-9, -35,-9, -36,-9, -37,-9, -38,-9,
		-39,-9, -40,-9, -41,-9, -43,-9, -9,-8, -11,-8, -13,-8, -21,-8, -23,-8, -25,-8,
		-27,-8, -31,-8, -33,-8, -41,-8, -43,-8, -5,-7, -6,-7, -7,-7, -8,-7, -9,-7,
		-11,-7, -13,-7, -14,-7, -15,-7, -16,-7, -18,-7, -19,-7, -20,-7, -21,-7, -23,-7,
		-25,-7, -27,-7, -29,-7, -30,-7, -31,-7, -33,-7, -35,-7, -36,-7, -37,-7, -38,-7,
		-39,-7, -40,-7, -41,-7, -43,-7, -5,-6, -9,-6, -11,-6, -16,-6, -18,-6, -23,-6,
		-25,-6, -27,-6, -29,-6, -33,-6, -35,-6, -43,-6, 5,-5, 4,-5, 3,-5, 2,-5,
		1,-5, -1,-5, -2,-5, -3,-5, -4,-5, -5,-5, -7,-5, -9,-5, -11,-5, -12,-5,
		-13,-5, -14,-5, -16,-5, -18,-5, -20,-5, -22,-5, -23,-5, -25,-5, -27,-5, -29,-5,
		-31,-5, -32,-5, -33,-5, -35,-5, -37,-5, -39,-5, -41,-5, -43,-5, 10,-4, 9,-4,
		8,-4, 7,-4, 6,-4, 5,-4, 1,-4, -1,-4, -5,-4, -7,-4, -9,-4, -11,-4,
		-16,-4, -18,-4, -19,-4, -20,-4, -21,-4, -22,-4, -25,-4, -27,-4, -29,-4, -31,-4,
		-35,-4, -37,-4, -39,-4, -41,-4, -43,-4, 10,-3, 5,-3, 3,-3, 1,-3, -1,-3,
		-3,-3, -5,-3, -7,-3, -9,-3, -13,-3, -14,-3, -15,-3, -16,-3, -24,-3, -25,-3,
		-26,-3, -27,-3, -33,-3, -34,-3, -35,-3, -37,-3, -39,-3, -41,-3, -43,-3, 10,-2,
		9,-2, 8,-2, 7,-2, 5,-2, 3,-2, 1,-2, -1,-2, -3,-2, -7,-2, -9,-2,
		-10,-2, -11,-2, -13,-2, -16,-2, -17,-2, -18,-2, -19,-2, -20,-2, -21,-2, -22,-2,
		-23,-2, -24,-2, -27,-2, -28,-2, -29,-2, -30,-2, -31,-2, -32,-2, -33,-2, -37,-2,
		-39,-2, -41,-2, -43,-2, 7,-1, 3,-1, 1,-1, 0,-1, -1,-1, -3,-1, -4,-1,
		-5,-1, -6,-1, -7,-1, -11,-1, -13,-1, -20,-1, -25,-1, -27,-1, -33,-1, -35,-1,
		-36,-1, -37,-1, -39,-1, -41,-1, -43,-1, 7,0, 6,0, 5,0, 3,0, 1,0,
		-3,0, -7,0, -8,0, -9,0, -10,0, -11,0, -13,0, -15,0, -16,0, -17,0,
		-18,0, -20,0, -22,0, -23,0, -25,0, -27,0, -29,0, -30,0, -31,0, -33,0,
		-37,0, -39,0, -41,0, -43,0, 5,1, 4,1, 3,1, 1,1, 0,1, -1,1,
		-3,1, -5,1, -7,1, -13,1, -17,1, -20,1, -22,1, -25,1, -27,1, -29,1,
		-33,1, -34,1, -35,1, -37,1, -39,1, -41,1, -43,1, 4,2, 1,2, -3,2,
		-5,2, -7,2, -9,2, -10,2, -11,2, -12,2, -13,2, -15,2, -16,2, -17,2,
		-18,2, -20,2, -22,2, -24,2, -25,2, -27,2, -29,2, -31,2, -32,2, -33,2,
		-35,2, -37,2, -38,2, -39,2, -41,2, -43,2, 4,3, 2,3, 1,3, -1,3,
		-2,3, -3,3, -5,3, -7,3, -9,3, -20,3, -22,3, -25,3, -29,3, -31,3,
		-35,3, -37,3, -39,3, -41,3, -42,3, -43,3, -44,3, -45,3, 4,4, 1,4,
		-5,4, -9,4, -11,4, -12,4, -13,4, -15,4, -16,4, -17,4, -18,4, -20,4,
		-22,4, -23,4, -25,4, -26,4, -27,4, -29,4, -31,4, -33,4, -37,4, -45,4,
		4,5, 2,5, 1,5, 0,5, -1,5, -2,5, -3,5, -4,5, -5,5, -6,5,
		-7,5, -8,5, -9,5, -20,5, -22,5, -29,5, -31,5, -32,5, -33,5, -34,5,
		-35,5, -36,5, -37,5, -38,5, -39,5, -40,5, -41,5, -42,5, -43,5, -45,5,
		4,6, -11,6, -12,6, -13,6, -14,6, -15,6, -17,6, -18,6, -19,6, -20,6,
		-22,6, -23,6, -24,6, -26,6, -27,6, -29,6, -45,6, 4,7, 3,7, 2,7,
		1,7, 0,7, -1,7, -2,7, -3,7, -4,7, -5,7, -6,7, -7,7, -8,7,
		-9,7, -10,7, -11,7, -15,7, -17,7, -24,7, -27,7, -29,7, -30,7, -31,7,
		-32,7, -33,7, -34,7, -35,7, -36,7, -37,7, -38,7, -39,7, -40,7, -41,7,
		-42,7, -43,7, -44,7, -45,7, -9,8, -11,8, -13,8, -15,8, -17,8, -19,8,
		-20,8, -21,8, -22,8, -23,8, -24,8, -25,8, -27,8, -32,8, -9,9, -11,9,
		-13,9, -17,9, -23,9, -27,9, -28,9, -29,9, -30,9, -32,9, -9,10, -11,10,
		-13,10, -14,10, -15,10, -16,10, -17,10, -18,10, -19,10, -20,10, -21,10, -23,10,
		-24,10, -25,10, -26,10, -27,10, -32,10, -9,11, -11,11, -23,11, -29,11, -30,11,
		-31,11, -32,11, -9,12, -11,12, -12,12, -13,12, -14,12, -15,12, -16,12, -17,12,
		-18,12, -19,12, -20,12, -21,12, -22,12, -23,12, -25,12, -26,12, -27,12, -28,12,
		-29,12, -9,13, -25,13, -9,14, -10,14, -11,14, -12,14, -13,14, -14,14, -15,14,
		-16,14, -17,14, -18,14, -19,14, -20,14, -21,14, -22,14, -23,14, -24,14, -25,14,
	3,0, 6,-8, 5,-8, 4,-8, 3,-8, 2,-8, 1,-8, 0,-8, -1,-8, -2,-8,
		-3,-8, -4,-8, 6,-7, -4,-7, 6,-6, 0,-6, -1,-6, -2,-6, -4,-6, 6,-5,
		4,-5, 3,-5, -2,-5, -4,-5, 6,-4, 3,-4, 2,-4, -1,-4, -2,-4, -4,-4,
		6,-3, 4,-3, 3,-3, -2,-3, -4,-3, 6,-2, 0,-2, -1,-2, -2,-2, -4,-2,
		6,-1, 4,-1, 3,-1, 2,-1, -4,-1, 6,0, 4,0, 2,0, -1,0, -2,0,
		-4,0, 6,1, 4,1, 3,1, 2,1, -4,1, 6,2, 0,2, -1,2, -2,2,
		-4,2, 6,3, 4,3, 3,3, 2,3, 0,3, -4,3, 6,4, 2,4, -1,4,
		-4,4, 6,5, 4,5, 3,5, 2,5, -2,5, -4,5, 6,6, 0,6, -1,6,
		-2,6, -4,6, 6,7, -4,7, 6,8, 5,8, 4,8, 3,8, 2,8, 1,8,
		0,8, -1,8, -2,8, -3,8, -4,8
};
const int MegaMaze::levelSizes[]={21,117,770,95};
const long MegaMaze::levelColors[]={0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFF00};

